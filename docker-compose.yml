version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - VITE_API_URL=http://localhost/api
    networks:
      - truck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - DB_PATH=/app/data/truck.db
      - BCRYPT_ROUNDS=12
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=100
      - CORS_ORIGIN=http://localhost
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - truck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backup:
    image: alpine
    volumes:
      - ./data:/backup/data
      - ./backups:/backup/dest
    command: >
      /bin/sh -c "
        while true; do
          cp /backup/data/truck.db /backup/dest/truck_$(date +%Y%m%d_%H%M%S).db
          find /backup/dest -name 'truck_*.db' -mtime +7 -delete
          sleep 86400
        done
      "
    networks:
      - truck-network
    restart: unless-stopped

networks:
  truck-network:
    driver: bridge

volumes:
  data:
  logs:
  backups:
